{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","props","todos","setSelectedTodo","selectedTodo","className","map","todo","id","title","completed","isSelected","classNames","type","onClick","TodoFilter","searchValue","selectValue","onSearchInput","onSelectInput","clearSearch","value","onChange","placeholder","style","pointerEvents","length","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","useState","user","setUser","useEffect","a","href","email","name","App","todosFromServer","setTodosFromServer","visibleTodos","setVisibleTodos","todoListLoaded","setTodolistLoaded","setSearchValue","setSelectValue","newTodos","filter","toLowerCase","includes","getFilteredTodos","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8972197c.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  setSelectedTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos, setSelectedTodo, selectedTodo } = props;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          const { id, title, completed } = todo;\n          let isSelected = false;\n\n          if (selectedTodo) {\n            isSelected = selectedTodo.id === id;\n          }\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames(\n                { 'has-background-info-light': isSelected },\n              )}\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              {completed\n                ? (\n                  <td className=\"is-vcentered\">\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  </td>\n                )\n                : <td className=\"is-vcentered\" />}\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={\n                  completed ? 'has-text-success' : 'has-text-danger'\n                }\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setSelectedTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far',\n                      { 'fa-eye': !isSelected },\n                      { 'fa-eye-slash': isSelected },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { ChangeEvent } from 'react';\n\ntype Props = {\n  searchValue: string;\n  selectValue: string;\n  onSearchInput: (event: ChangeEvent<HTMLInputElement>) => void;\n  onSelectInput: (event: ChangeEvent<HTMLSelectElement>) => void;\n  clearSearch: () => void;\n};\n\nexport const TodoFilter: React.FC<Props> = (props) => {\n  const {\n    searchValue,\n    selectValue,\n    onSearchInput,\n    onSelectInput,\n    clearSearch,\n  } = props;\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectValue}\n            onChange={onSelectInput}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchValue}\n          onChange={onSearchInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {!!searchValue.length\n          && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearSearch}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedTodo: Todo;\n  setSelectedTodo: (clearTodo: null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = (props) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const { selectedTodo, setSelectedTodo } = props;\n\n  const {\n    id,\n    userId,\n    title,\n    completed,\n  } = selectedTodo;\n\n  useEffect(() => {\n    (async () => {\n      setUser(await getUser(userId));\n    })();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { ChangeEvent, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nfunction getFilteredTodos(\n  todos: Todo[],\n  searchValue: string,\n  selectValue: string,\n): Todo[] {\n  let newTodos = [...todos];\n\n  switch (selectValue) {\n    case 'completed':\n      newTodos = newTodos.filter(todo => todo.completed);\n      break;\n\n    case 'active':\n      newTodos = newTodos.filter(todo => !todo.completed);\n      break;\n    default:\n      break;\n  }\n\n  return newTodos.filter(todo => todo.title.toLowerCase().includes(searchValue.toLowerCase()));\n}\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [todoListLoaded, setTodolistLoaded] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [selectValue, setSelectValue] = useState('all');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const handleSearchInput = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(event.target.value);\n  };\n\n  const clearSearchInput = () => {\n    setSearchValue('');\n  };\n\n  const handleSelectInput = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectValue(event.target.value);\n  };\n\n  useEffect(() => {\n    getTodos()\n      .then(todos => {\n        setTodosFromServer(todos);\n        setTodolistLoaded(true);\n      });\n  }, []);\n\n  useEffect(() => {\n    setVisibleTodos(getFilteredTodos(todosFromServer, searchValue, selectValue));\n  }, [searchValue, selectValue, todosFromServer]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchValue={searchValue}\n                selectValue={selectValue}\n                onSearchInput={handleSearchInput}\n                onSelectInput={handleSelectInput}\n                clearSearch={clearSearchInput}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todoListLoaded\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodo={selectedTodo}\n                    setSelectedTodo={setSelectedTodo}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {!!selectedTodo\n      && <TodoModal selectedTodo={selectedTodo} setSelectedTodo={setSelectedTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}